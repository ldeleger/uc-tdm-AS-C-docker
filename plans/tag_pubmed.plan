<alvisnlp-plan id="entities">
  <module id="read" class="XMLReader2">
    <!-- <sourcePath>corpus/&corpus;/batch/&batch;/batch.xml</sourcePath> -->
    <sourcePath>&inputfile;</sourcePath>
    <xslTransform>plans/microbes-pubmed2alvisnlp.xslt</xslTransform>
  </module>

  <mesh-path class="FileMapper2">
    <mappingFile>resources/2017MeshTree.txt</mappingFile>
    <target>documents.(sections:mesh|sections:chemical)</target>
    <form>@UI</form>
    <targetFeatures>mesh-path,,mesh-name</targetFeatures>
    <keyColumn>1</keyColumn>
  </mesh-path>

  <module id="set-url" class="Action">
    <target>documents</target>
    <action>set:feat:url("http://www.ncbi.nlm.nih.gov/pubmed/" ^ @id)</action>
    <setFeatures/>
  </module>

  <import file="plans/entities.plan"/>

  <import file="plans/relations.plan"/>

  <sequence id="output">
    <doc-mesh class="TabularExport">
      <outDir>&outdir;</outDir>
      <files>$</files>
      <fileName>"doc-mesh.txt"</fileName>
      <lines>documents.sections:mesh</lines>
      <columns separator=";">
	"&batch;";
	document.@id;
	@UI;
	@mesh-name;
	@mesh-path
      </columns>
    </doc-mesh>

    <module id="taxa" class="TabularExport">
      <outDir>&outdir;</outDir>
      <files>$</files>
      <fileName>"taxa.txt"</fileName>
      <lines>documents.sections.layer:taxa</lines>
      <columns separator=";">
    	"&batch;";
    	section.document.@id;
    	section.@name;
    	start ^ "-" ^ end;
    	@form;
    	@taxid;
    	@canonical-name;
    	@path;
    	@rank
      </columns>
    </module>

    <module id="microorganisms" class="TabularExport">
      <outDir>&outdir;</outDir>
      <files>$</files>
      <fileName>"microorganisms.txt"</fileName>
      <lines>documents.sections.layer:microorganism</lines>
      <columns separator=";">
    	"&batch;";
    	section.document.@id;
    	section.@name;
    	start ^ "-" ^ end;
    	@form;
    	@taxid;
    	@canonical-name;
    	@path;
    	@rank
      </columns>
    </module>

    <module id="bacteria" class="TabularExport">
      <outDir>&outdir;</outDir>
      <files>$</files>
      <fileName>"bacteria.txt"</fileName>
      <lines>documents.sections.layer:bacteria</lines>
      <columns separator=";">
    	"&batch;";
    	section.document.@id;
    	section.@name;
    	start ^ "-" ^ end;
    	@form;
    	@taxid;
    	@canonical-name;
    	@path;
    	@rank
      </columns>
    </module>

    <module id="habitats" class="TabularExport">
      <outDir>&outdir;</outDir>
      <files>$</files>
      <fileName>"habitats.txt"</fileName>
      <lines>documents.sections.layer:habitats</lines>
      <columns separator=";">
    	"&batch;";
    	section.document.@id;
    	section.@name;
    	start ^ "-" ^ end;
    	@form;
    	@concept-id;
    	@concept-name;
    	@concept-path;
    	@explain_concept-synonym;
    	@explain_significant-head;
    	@score
      </columns>
    </module>

    <module id="phenotypes" class="TabularExport">
      <outDir>&outdir;</outDir>
      <files>$</files>
      <fileName>"phenotypes.txt"</fileName>
      <lines>documents.sections.layer:phenotypes</lines>
      <columns separator=";">
    	"&batch;";
    	section.document.@id;
    	section.@name;
    	start ^ "-" ^ end;
    	@form;
    	@concept-id;
    	@concept-name;
    	@concept-path;
    	@explain_concept-synonym;
    	@explain_significant-head;
    	@score
      </columns>
    </module>

    <module id="geo" class="TabularExport">
      <outDir>&outdir;</outDir>
      <files>$</files>
      <fileName>"geo.txt"</fileName>
      <lines>documents.sections.layer:Geographical</lines>
      <columns separator=";">
    	"&batch;";
    	section.document.@id;
    	section.@name;
    	start ^ "-" ^ end;
    	@form
      </columns>
    </module>

    <module id="relations" class="TabularExport">
      <outDir>&outdir;</outDir>
      <files>$</files>
      <fileName>"relations.txt"</fileName>
      <lines>documents.sections.relations:CooccurrenceLocalization.tuples</lines>
      <columns separator=";">
    	"&batch;";
    	section.document.@id;
    	section.@name;
    	args:Bacterium.@taxid;
    	args:Bacterium.@form;
    	args:Bacterium.@canonical-name;
    	args:Bacterium.@path;
    	args:Localization.@concept-id;
    	args:Localization.@form;
    	args:Localization.@concept-name;
    	args:Localization.@concept-path
      </columns>
    </module>

    <rdf class="RDFExport">
      <outDir>&outdir;</outDir>
      <files>$</files>
      <fileName>"&batch;.ttl"</fileName>
      <format>turtle</format>
      <prefixes>
    	OBT=http://bibliome.jouy.inra.fr/OntoBiotope#,
    	obta=http://bibliome.jouy.inra.fr/OntoBiotope/Annotation#,
    	pmid=https://www.ncbi.nlm.nih.gov/pubmed/,
    	taxid=https://www.ncbi.nlm.nih.gov/Taxonomy/Browser/wwwtax.cgi?id=
      </prefixes>
      <statements separator=";">
    	documents.sections.layer.uri:set(obta^id:unique);

    	documents.sections.layer[@taxid].(
    	stmt:res(rdf:type, taxid^@taxid)
    	| stmt:res(obta:document, pmid^section.document.@id)
    	| stmt:str(obta:form, @form)
    	);
	
    	documents.sections.layer[@concept-id].(
    	stmt:res(rdf:type, OBT^str:after:':'(@concept-id))
    	| stmt:res(obta:document, pmid^section.document.@id)
    	| stmt:str(obta:form, @form)
    	);

    	documents.sections.relations:CooccurrenceLocalization.tuples as l.args:Bacterium.
    	stmt:res(OBT:lives_in, obta^l.args:Localization.id:unique)
      </statements>
    </rdf>

    <sequence id="dependencies">
      <module id="index-words" class="Action">
  	<target>documents.sections.layer:sentences[@name != "author"]</target>
  	<action>id:enumerate:word-index(inside:words)</action>
  	<setFeatures/>
      </module>

      <module id="index-sentences" class="Action">
  	<target>documents.sections[@name != "author"]</target>
  	<action>id:enumerate:sentence-index(layer:sentences)</action>
  	<setFeatures/>
      </module>

      <module id="sentences" class="TabularExport">
  	<outDir>&outdir;</outDir>
  	<files>$</files>
  	<fileName>"sentences.txt"</fileName>
  	<lines>documents.sections.layer:sentences[@name != "author"]</lines>
  	<columns separator=";">
  	  section.document.@id;
  	  section.@name;
  	  @sentence-index;
  	  start ^ "-" ^ end;
  	  str:replace(@form, "\n", " ")
  	</columns>
  	<headers>
  	  "DOCUMENT",
  	  "SECTION",
  	  "SENTENCE",
  	  "OFFSET",
  	  "FORM"
  	</headers>
      </module>

      <module id="anaphora" class="TabularExport">
  	<outDir>&outdir;</outDir>
  	<files>$</files>
  	<fileName>"anaphora.txt"</fileName>
  	<lines>documents.sections.relations:coreferences.tuples[args:Ante]</lines>
  	<columns separator=";">
  	  relation.section.document.@id;
  	  relation.section.@name;
  	  args:Anaphora.start;
  	  args:Anaphora.outside:sentences.@sentence-index;
  	  args:Anaphora.@form;
  	  args:Ante.start;
  	  args:Ante.outside:sentences.@sentence-index;
  	  args:Ante.@form;
  	  args:AnteTwo.start;
  	  args:AnteTwo.outside:sentences.@sentence-index;
  	  args:AnteTwo.@form
  	</columns>
  	<headers>
  	  "DOCUMENT",
  	  "SECTION",
  	  "ANAPHOR OFFSET",
  	  "ANAPHOR SENTENCE",
  	  "ANAPHOR FORM",
  	  "ANTE OFFSET",
  	  "ANTE SENTENCE",
  	  "ANTE FORM",
  	  "ANTE 2 OFFSET",
  	  "ANTE 2 SENTENCE",
  	  "ANTE 2 FORM"
  	</headers>
      </module>

      <module id="dependencies" class="TabularExport">
  	<outDir>&outdir;</outDir>
  	<files>$</files>
  	<fileName>"dependencies.txt"</fileName>
  	<lines>documents.sections[@name != "author"].relations:dependencies.tuples</lines>
  	<columns separator=";">
  	  relation.section.document.@id;
  	  relation.section.@name;
  	  args:sentence.@sentence-index;
  	  @label;
  	  args:head.@word-index;
  	  args:head.@form;
  	  args:head.@lemma;
  	  args:head.@pos;
  	  args:head.start ^ "-" ^ args:head.end;
  	  args:dependent.@word-index;
  	  args:dependent.@form;
  	  args:dependent.@lemma;
  	  args:dependent.@pos;
  	  args:dependent.start ^ "-" ^ args:dependent.end
  	</columns>
  	<headers>
  	  "DOCUMENT",
  	  "SECTION",
  	  "SENTENCE",
  	  "LABEL",
  	  "HEAD INDEX",
  	  "HEAD FORM",
  	  "HEAD LEMMA",
  	  "HEAD POS",
  	  "HEAD OFFSET",
  	  "DEPENDENT INDEX",
  	  "DEPENDENT FORM",
  	  "DEPENDENT LEMMA",
  	  "DEPENDENT POS",
  	  "DEPENDENT OFFSET"
  	</headers>
      </module>
    </sequence>
  </sequence>

  <sequence id="adb">
    <module id="taxa-ancestors" class="Action">
      <target>documents.sections.layer:bacteria</target>
      <action>re:findall:'[^/]+'(@path, set:feat:ancestors(match:group(0)))</action>
      <setFeatures/>
    </module>
    
    <module id="habitat-ancestors" class="Action">
      <target>documents.sections.layer:habitats</target>
      <action>re:findall:'[^/]+'(@concept-path, set:feat:ancestors(match:group(0)))</action>
      <setFeatures/>
    </module>
    
    <module id="index" class="AlvisDBIndexer">
      <indexDir>&outdir;/adb</indexDir>
      <elements>
  	<relations>
  	  <items>documents.sections.relations:CooccurrenceLocalization.tuples[args:Bacterium[@bacteria == "true"]]</items>
  	  <id>"&batch;_" ^ id:unique</id>
  	  <name>"Localization"</name>
  	  <type>"localization"</type>
  	  <args>args:Bacterium|args:Localization</args>
  	  <arg-id>if @taxid then @taxid else @concept-id</arg-id>
  	  <arg-name>if @taxid then @canonical-name else @concept-name</arg-name>
  	  <ancestors>nav:features:ancestors</ancestors>
  	  <ancestor-id>@value</ancestor-id>
  	  <arg-doc>section.document.@id</arg-doc>
  	  <arg-sec>section.@name</arg-sec>
  	</relations>
      </elements>
    </module>
  </sequence>

  <module id="index" class="AlvisIRIndexer">
    <indexDir>&outdir;/index</indexDir>
    <tokenPositionGap>1024</tokenPositionGap>
    <fieldNames>title,abstract,author,full-author,pmid,year,journal,mesh,url</fieldNames>
    <relations>
      <livesin>taxon,habitat</livesin>
    </relations>
    <propertyKeys/>
    <documents>
      <fields>
  	<instances>sections:title | sections:abstract</instances>
  	<annotations>
  	  <instances>layer:microorganism</instances>
  	  <text>"{taxon}" ^ @path ^ "/"</text>
  	</annotations>
  	<annotations>
  	  <instances>layer:sentences</instances>
  	  <text>"{SENT}"</text>
  	</annotations>
  	<annotations>
  	  <instances>layer:habitats</instances>
  	  <text>"{habitat}" ^ @concept-path ^ "/"</text>
  	</annotations>
	<annotations>
	  <instances>layer:phenotypes</instances>
	  <text>"{phenotype}" ^ @concept-path ^ "/"</text>
	</annotations>
  	<annotations>
  	  <instances>relations:CooccurrenceLocalization.tuples</instances>
  	  <fragments>
  	    <instances>sort:ival(args, start)</instances>
  	  </fragments>
  	  <text>"{livesin}{taxon}" ^ args:Bacterium.@path ^ "/~{habitat}" ^ args:Localization.@concept-path ^ "/"</text>
  	  <arguments>
  	    <taxon>args:Bacterium.id:unique</taxon>
  	    <habitat>args:Localization.id:unique</habitat>
  	  </arguments>
  	</annotations>
  	<annotations>
  	  <instances>relations:CooccurrenceLocalization.tuples</instances>
  	  <fragments>
  	    <instances>sort:ival(args, start)</instances>
  	  </fragments>
  	  <text>"{livesin}" ^ args:Bacterium.@form ^ "/~" ^ args:Localization.@form ^ "/"</text>
  	  <arguments>
  	    <taxon>args:Bacterium.id:unique</taxon>
  	    <habitat>args:Localization.id:unique</habitat>
  	  </arguments>
  	</annotations>
      </fields>
      <fields>
  	<instances>nav:features:mesh-name</instances>
  	<field-name>"mesh"</field-name>
  	<keyword>@value</keyword>
      </fields>
      <fields>
  	<instances>sections:author</instances>
      </fields>
      <fields>
  	<instances>sections:author</instances>
  	<field-name>"full-author"</field-name>
  	<keyword>contents</keyword>
      </fields>
      <fields>
  	<instances>$</instances>
  	<field-name>"pmid"</field-name>
  	<keyword>@id</keyword>
      </fields>
      <fields>
  	<instances>$[@year]</instances>
  	<field-name>"year"</field-name>
  	<keyword>@year</keyword>
      </fields>
      <fields>
  	<instances>$[@journal]</instances>
  	<field-name>"journal"</field-name>
  	<keyword>@journal</keyword>
      </fields>
      <fields>
        <instances>$[@url]</instances>
        <field-name>"url"</field-name>
        <keyword>document.@url</keyword>
      </fields>
    </documents>
  </module>

  <module id="success" class="TabularExport">
    <outDir>&outdir;</outDir>
    <files>$</files>
    <fileName>"success.txt"</fileName>
    <lines>documents</lines>
    <columns>@id</columns>
  </module>

</alvisnlp-plan>
