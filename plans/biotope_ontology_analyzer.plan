<alvisnlp-plan id="ontology-analyzer">

  <module id="read-obo" class="OBOReader">
    <oboFiles>&ontofile;</oboFiles>
    <pathFeature>path</pathFeature>
  </module>

  <!-- select and filter specific branches : select habitat branch (OBT:000000) and remove geographical sub-branch (OBT002448) -->
<!-- <filter> -->
<!--   <module id="filter-branches" class="Action"> -->
<!--     <target>documents[not @path =~ "/&branch-to-select;/" or @path =~ "/&branch-to-remove;"]</target> -->
<!--     <action>delete</action> -->
<!--     <deleteElements/> -->
<!--   </module> -->
<!-- </filter> -->

  <module id="words" class="WoSMig"/>
  <module id="sentences" class="SeSMig"/>

  <module id="tt" class="TreeTagger">
    <treeTaggerExecutable>/projet/mig/work/textemig/software/tree-tagger-3.2/bin/tree-tagger</treeTaggerExecutable>
    <parFile>/projet/mig/work/textemig/software/tree-tagger-3.2/lib/english.par</parFile>
    <noUnknownLemma/>
  </module>

<synonyms>
    <syno class="PatternMatcher">
      <pattern>
	(group1: [ true ]+)
	[@form == "and"]
        (group2: [not @form =~ "(related|similar)"]+
        [@form =~ "product"])
      </pattern>
      <actions>
	<createAnnotation group="group1" layer="synonyms"/>
	<createAnnotation group="group2" layer="synonyms"/>
      </actions>
    </syno>

    <syno2 class="PatternMatcher">
      <pattern>
	(group1: [ true ]+)
	(([@form == "and"]
        (([@form =~ "(related|similar)"][@form =~ "product"])|
	([@lemma == "primary"][@lemma == "derivative"][@lemma == "thereof"])|
	([@form =~ "product"][@lemma == "thereof"])))|
	([@form == "as"][@form == "food"]))
      </pattern>
      <actions>
	<createAnnotation group="group1" layer="synonyms"/>
      </actions>
    </syno2>

<module id="add-synonyms" class="Action">
    <target>documents.sections.layer:synonyms</target>
    <action>document.new:section:syno(target.@form).set:feat:syno("true")</action>
    <createSections/>
    <setFeatures/>
</module>

  <module id="words2" class="WoSMig">
  <sectionFilter>@syno=="true"</sectionFilter>
  </module>
  <module id="sentences2" class="SeSMig">
  <sectionFilter>@syno=="true"</sectionFilter>
  </module>

  <module id="tt2" class="TreeTagger">
    <sectionFilter>@syno=="true"</sectionFilter>
    <treeTaggerExecutable>/projet/mig/work/textemig/software/tree-tagger-3.2/bin/tree-tagger</treeTaggerExecutable>
    <parFile>/projet/mig/work/textemig/software/tree-tagger-3.2/lib/english.par</parFile>
    <noUnknownLemma/>
  </module>

</synonyms>

  <module id="POS-tag-correction-1" class="Action">
    <target>documents.sections.layer:words[(@pos == "VVG" or @pos == "VVN" or @pos == "VVD") and before:words{-1}.@form == "-"]</target>
    <action>set:feat:lemma(str:lower(@form))</action>
    <setFeatures/>
  </module>
  <module id="POS-tag-correction" class="Action">
    <target>documents.sections.layer:words[(@pos == "VVG" or @pos == "VVN" or @pos == "VVD") and before:words{-1}.@form == "-"]</target>
    <action>set:feat:pos("JJ")</action>
    <setFeatures/>
  </module>

  <module id="lemma-correction" class="Action">
    <target>documents.sections.layer:words[(@pos == "NN" or @pos == "JJ") and @form =~ "ing$" ]</target>
    <action>set:feat:lemma(str:lower(@form))</action>
    <setFeatures/>
  </module>
  <module id="lemma-correction-2" class="Action">
    <target>documents.sections.layer:words[@pos == "JJ" and @form =~ "ed$" ]</target>
    <action>set:feat:lemma(str:lower(@form))</action>
    <setFeatures/>
  </module>

  <module id="specific-POS-tag-correction" class="Action">
    <target>documents.sections.layer:words[@form == "wrt"]</target>
    <action>set:feat:pos("IN")</action>
    <setFeatures/>
  </module>

  <module id="POS-tag-correction2-1" class="Action">
    <target>documents.sections.layer:words[@pos == "VVN" or @pos == "VVD"]</target>
    <action>set:feat:lemma(@form)</action>
    <setFeatures/>
  </module>
  <module id="POS-tag-correction2" class="Action">
    <target>documents.sections.layer:words[(@pos == "VVN" or @pos == "VVD") and (@form =~ "ed$" or not end == outside:sentences.end)]</target>
    <action>set:feat:pos("JJ")</action>
    <setFeatures/>
  </module>
  <module id="POS-tag-correction2-2" class="Action">
    <target>documents.sections.layer:words[@pos == "VVN" or @pos == "VVD"]</target>
    <action>set:feat:pos("NN")</action>
    <setFeatures/>
  </module>

<module id="POS-tag-correction5-1" class="Action">
    <target>documents.sections.layer:words[@pos == "VVG"]</target>
    <action>set:feat:lemma(@form)</action>
    <setFeatures/>
  </module>

  <module id="POS-tag-correction5-2" class="Action">
    <target>documents.sections.layer:words[@pos == "VVG" and end == outside:sentences.end]</target>
    <action>set:feat:pos("NN")</action>
    <setFeatures/>
  </module>

  <module id="POS-tag-correction3-1" class="Action">
    <target>documents.sections.layer:words[@pos == "VV" or @pos == "VVP"]</target>
    <action>set:feat:lemma(@form)</action>
    <setFeatures/>
  </module>
  <module id="POS-tag-correction3" class="Action">
    <target>documents.sections.layer:words[@pos == "VV" or @pos == "VVP"]</target>
    <action>set:feat:pos("NN")</action>
    <setFeatures/>
  </module>

  <module id="POS-tag-correction4" class="Action">
    <target>documents.sections.layer:words[@pos == "VVZ"]</target>
    <action>set:feat:pos("NNS")</action>
    <setFeatures/>
  </module>

<module id="analyze" class="TomapTrain">
    <outFile>&outfile;</outFile>
    <workingDir>yatea-train</workingDir>
    <yateaExecutable>/usr/local/public/perl-5-24.0/bin/yatea</yateaExecutable>
    <configDir>/projet/mig/save/textemig/projet-work/resources/YaTeA/config-habitats</configDir>
    <localeDir>/projet/mig/save/textemig/projet-work/resources/YaTeA/locale</localeDir>
    <rcFile>plans/yatea.rc</rcFile>
    <perlLib>/projet/mig/work/textemig/biotopes/software/yatea-lib</perlLib> 
    <conceptIdentifier>document.@id</conceptIdentifier>
 </module>

</alvisnlp-plan>
